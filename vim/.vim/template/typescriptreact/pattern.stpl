import.fontawesome
	import { fa{{_input_:icon}} } from '@fortawesome/free-{{_input_:type:solid}}-svg-icons';
	import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

export
	export * from './{{_input_:file}}';

export.type
	export type {{_input_:name}} = {
	  {{_cursor_}}
	};

useState
	const [{{_input_:name}}, set{{_input_:Name}}] = useState<{{_input_:type:boolean}}>({{_input_:default:true}});

useRecoilState
	const [{{_input_:name}}, set{{_input_:Name}}] = useRecoilState({{_input_:name}}State);

useRecoilValue
	const {{_input_:name}} = useRecoilValue({{_input_:name}}State);

useSetRecoilState
	const set{{_input_:Name}} = useSetRecoilState({{_input_:name}}State);

useEffect
	useEffect(() => {
		{{_cursor_}}
	}, []);

useCallback
	const {{_input_:name}} = useCallback(() => {
	  {{_cursor_}}
	}, [{{_input_:deps}}]);

useMemo
	const {{_input_:name}} = useMemo(() => {
	  {{_cursor_}}
	}, [{{_input_:deps}}]);

log
	console.log(`[$TM_FILENAME:$TM_LINE_NUMBER] {{_input_:var}}`, {{_input_:var}});

map
	{{{_input_:name}}s.map(({{_input_:name}}, _) => {
	  return (
	    {{_cursor_}}
	  );
	})}

sleep
	const sleep = (ms: number) => new Promise((res) => setTimeout(res, ms));
	await sleep(1000);

component
	import { ReactNode, useState } from 'react';
	
	export type Props = {
		children: ReactNode;
	};
	
	const {{_input_:name}} = ({ children }: Props) => {
	  return (
	    <>
	      {children}
	      {{_cursor_}}
	    </>
	  );
	};
	
	export default {{$1}};

component.named
	export const {{_input_:name}} = () => {
	  return (
	    <>
	      {{_cursor_}}
	    </>
	  );
	};

usecase.\(\S\+\).\(\S\+\)
	export type {{$1}}ListResponse = { {{$2}}s: {{$1}}[] };
	
	export const use{{$1}}List = (query: {{$1}}ListQuery) => {
	  const repository = use{{$1}}Repository();
	
	  return useSWR<{{$1}}ListResponse>(
	    {{$2}}CacheKeyGenerator.generateListKey({ query }),
	    () => repository.list(query),
	  );
	}
	
	export type {{$1}}ReadResponse = { {{$2}}: {{$1}} };

	export const use{{$1}}Read = (query: { id: {{$1}}['id'] }) => {
	  const repository = use{{$1}}Repository();
	
	  return useSWR<{{$1}}ReadResponse>(
	    {{$2}}CacheKeyGenerator.generateReadKey(query),
	    () => repository.read(query),
	  );
	};

repository.use.\(\S\+\)
	export const use{{$1}}Repository = () => {
	  const apiClient = useApiClient();
	  return useMemo(() => create{{$1}}Repository(apiClient), [apiClient]);
	};

repository.create.\(\S\+\).\(\S\+\)
	export const create{{$1}}Repository = (apiClient: ApiClient) => {
	  async read({ id }: { id: {{$1}}['id'] }) {
	    const { data } = await apiClient.get{{$1}}({ id })
	
	    return {
	      {{$2}}: convert{{$1}}FromData(data.{{$2}}),
	    };
	  },
	  async list(query: {{$1}}ListQuery) {
	    const queryData = convert{{$1}}ListQueryToData(query);
	    const { data } = await apiClient.get{{$1}}s(queryData);
	
	    return {
	      {{$2}}: data.{{$2}}s.map(convert{{$1}}FromData),
	    };
	  },
	};

state
	import { atom } from 'recoil';
	import { recoilPersist } from 'recoil-persist';
	
	const { persistAtom } = recoilPersist({
	  key: 'recoil-persist',
	  storage: typeof window === 'undefined' ? undefined : sessionStorage,
	});
	
	export type {{_input_:name}}StateType = {
	  {{_input_:var:is}}: {{_input_:type:boolean}};
	};
	
	export const {{_input_:name}}State = atom<{{_input_:name}}StateType>({
	  key: '{{_input_:name}}',
	  default: {
	    {{_input_:var:is}}: {{_input_:default:true}}
	  },
	  effects_UNSTABLE: [persistAtom],
	});

api
	import type { NextApiRequest, NextApiResponse } from 'next';
	
	const handler = async (req: NextApiRequest, res: NextApiResponse) => {
	  try {
	    res.status(200).json({ message: success });
	  } catch (error) {
	    res.status(400).json({ message: error.message });
	  }
	};
	
	export default handler;

