import.fontawesome
	import { fa{{_input_:icon}} } from '@fortawesome/free-{{_input_:type:solid}}-svg-icons';
	import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

export
	export * from './{{_input_:file}}';

export.type
	export type {{_input_:name}} = {
	  {{_cursor_}}
	};

useState
	const [{{_input_:name}}, set{{_input_:Name}}] = useState<{{_input_:type:boolean}}>({{_input_:default:true}});

useRef
	const {{_input_:name}}Ref = useRef<{{_input_:type:HTMLInputElement}}>({{_input_:default:null}});

useRecoilState
	const [{{_input_:name}}, set{{_input_:Name}}] = useRecoilState({{_input_:name}}State);

useRecoilValue
	const {{_input_:name}} = useRecoilValue({{_input_:name}}State);

useSetRecoilState
	const set{{_input_:Name}} = useSetRecoilState({{_input_:name}}State);

useEffect
	useEffect(() => {
		{{_cursor_}}
	}, []);

useCallback
	const {{_input_:name}} = useCallback(() => {
	  {{_cursor_}}
	}, [{{_input_:deps}}]);

useMemo
	const {{_input_:name}} = useMemo(() => {
	  {{_cursor_}}
	}, [{{_input_:deps}}]);

log
	console.log(`[$TM_FILENAME:$TM_LINE_NUMBER] {{_input_:var}}`, {{_input_:var}});

map
	{{{_input_:name}}s.map(({{_input_:name}}, _) => {
	  return (
	    {{_cursor_}}
	  );
	})}

map.range
	{[...Array({{_input_:number:10}})].map((_, {{_input_:index:i}}) => {
	  return (
	    <div key={ {{_input_:index:i}} }>
	      {{_cursor_}}
	    </div>
	  );
	})}

sleep
	const sleep = (ms: number) => new Promise((res) => setTimeout(res, ms));
	await sleep(1000);

page
	export default function {{_input_:name:Index}}() {
	  return (
	    <{{_input_:layout:Default}}Layout title="{{_input_:title}}">
	    </{{_input_:layout:Default}}Layout>
	  );
	};

component
	export const {{_input_:name}} = () => {
	  return (
	    <>
	      {{_cursor_}}
	    </>
	  );
	};

state
	import { atom } from 'recoil';
	import { recoilPersist } from 'recoil-persist';
	
	const { persistAtom } = recoilPersist({
	  key: 'recoil-persist',
	  storage: typeof window === 'undefined' ? undefined : sessionStorage,
	});
	
	export type {{_input_:name}}StateType = {
	  {{_input_:var:is}}: {{_input_:type:boolean}};
	};
	
	export const {{_input_:name}}State = atom<{{_input_:name}}StateType>({
	  key: '{{_input_:name}}',
	  default: {
	    {{_input_:var:is}}: {{_input_:default:true}}
	  },
	  effects_UNSTABLE: [persistAtom],
	});

fontawesome
	<FontAwesomeIcon
	  icon={ fa{{_cursor_}} }
	  className='h-{{_input_:size:4}} w-{{_input_:size:4}} transition duration-{{_input_:duration:200}} hover:cursor-pointer hover:opacity-{{_input_:opacity:50}}'
	/>
