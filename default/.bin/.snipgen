#!/bin/sh
set -eu

_snipgen() {
	local PROFILE=~/.profile
	local TMP_PATH=/tmp/snipgen

	local DIFFERS='sh:shellscript make:makefile tf:terraform'

	if [ -z "$VSCODE_SNIPPET_DIR" ]; then
		for snippet_dir in \
			"/Users/$USER/AppData/Roaming/Code/User/snippets" \
			"/mnt/c/Users/$USER/AppData/Roaming/Code/User/snippets" \
			"/Users/$USER/Library/Application Support/Code/User/snippets"; do
			if [ -d "$snippet_dir" ]; then
				VSCODE_SNIPPET_DIR="$snippet_dir"
				break
			fi
		done
	fi

	if [ ! -d "$VSCODE_SNIPPET_DIR" ]; then
		VSCODE_SNIPPET_DIR=$(.prompt 'vscode snippet directory' "$VSCODE_SNIPPET_DIR")
		if [ ! -d "$VSCODE_SNIPPET_DIR" ]; then
			.failure "no such directory '$VSCODE_SNIPPET_DIR'."
		fi
	fi

	local prefix='export VSCODE_SNIPPET_DIR='
	local export="$prefix'$VSCODE_SNIPPET_DIR'"

	cat $PROFILE \
	| sed -e "/^$prefix/d" \
	| awk -v "end=$export" '{ print; } END { print end; }' \
	| tee $PROFILE > /dev/null

	eval $export

	[ -d "$TMP_PATH" ] && rm -rf "$TMP_PATH"
	mkdir "$TMP_PATH"

	for file in $(find ~/.vim/template -name pattern.stpl); do
		local dir=$(basename $(dirname $file))
	
		for differ in $DIFFERS; do
			dir=$(echo $dir | sed -e "s/^$(echo $differ | cut -d':' -f1)$/$(echo $differ | cut -d':' -f2)/")
		done

		awk -v "eol=$(cat $file | wc -l)" '
			/^\t/ {
				l = $0;
	
				gsub(/^\t/, "", l);
				gsub(/\\/, "\\\\", l);
				gsub(/\t/, "\\t", l);
				gsub(/"/, "\\\"", l);
				gsub(/\$/, "\\\\$", l);
				gsub(/\\\\\$TM_/, "$TM_", l);
				gsub("{{_cursor_}}", "$0", l);
	
				for (i = 1; i <= argc; i++) {
					gsub("{{\\\\\\\\\\$" i "}}", "$" i, l);
				}

				while (match(l, /{{_input_:[^}]+}}/)) {
					target = substr(l, RSTART, RLENGTH);

					name = target;
					sub("{{_input_:", "", name);
					sub("}}", "", name);
					split(name, names, ":");

					value = "";
					if (length(names) == 2) {
						name = names[1];
						value = names[2];
					}

					for (i = 0; i < length(vars); i++) {
						if (name == vars[i]) {
							break;
						}
					}

					if (i == length(vars)) {
						vars[length(vars)] = name;
					}

					if (length(value) > 0) {
						replacement = "${" (i + 1) ":" value "}"
					} else {
						replacement = "$" (i + 1)
					}

					gsub(target, replacement, l);

					name_capitalize = toupper(substr(name, 1, 1)) substr(name, 2);
					target_capitalize = target;
					sub(name, name_capitalize, target_capitalize);
					replacement = "${" (i + 1) "/(.*)/${" (i + 1) ":/capitalize}/}";

					gsub(target_capitalize, replacement, l);

					name_camel = tolower(substr(name, 1, 1)) substr(name, 2);
					target_camel = target;
					sub(name, name_camel, target_camel);
					replacement = "${" (i + 1) "/(.*)/${" (i + 1) ":/camelcase}/}";

					gsub(target_camel, replacement, l);
				}

				if (body) {
					body = sprintf("%s,\n", body);
				}
	
				body = sprintf("%s      \"%s\"", body, l);
			}
	
			$0 ~ /^[^\t]/ || NR == eol {
				for (argc = 0; match($0, /\\\(.+\\\)/); argc++) {
					sub(/\\\([^\(\)]+\\\)/, "$" (argc + 1));
				}

				gsub(/\\/, "\\\\");
	
				if (prefix) {
					if (json) {
						json = sprintf("%s,\n", json);
					}
					json = sprintf("%s  \"%s\": {\n    \"prefix\": \"$%s\",\n    \"body\": [\n%s\n    ]\n  }", json, prefix, prefix, body);
				}
	
				prefix = $0;
	
				body = "";

				split("", vars);
			}
	
			END {
				printf("{\n%s\n}", json);
			}
		' "$file" > "$TMP_PATH/$dir.json"
	done

	local is_updated=

	printf "%-3s  %-2s %-10s %-30s %-50s\n" "Num" "?" "Add:Del" "File Type" "VSCode Snippet Path"

	local files=$(find "$TMP_PATH" -name '*.json')
	local lines=
	for file in $files; do
		local status=
		local add_del=
		local json_file=$(basename $file)
		local vscode_json="$VSCODE_SNIPPET_DIR/$json_file"
		if [ -f "$vscode_json" ]; then
			add_del=$(diff -u "$vscode_json" "$file" | awk 'BEGIN{a=b=0}/^\+/{a++}/^\-/{d++}END{if(a>0||b>0)printf "%d:%d",a,d}')
			if [ -n "$add_del" ]; then
				status=M
			fi
		else
			status=A
		fi
		[ -n "$status" ] && is_updated=1

		lines="$lines${lines:+\n}$(printf "  %-2s %-10s %-30s %-50s" "$status" "$add_del" "${json_file%.*}" "$vscode_json")"
	done 

	printf "$lines" | nl -w 3 -s ''

	if [ -z "$is_updated" ]; then
		.success 'no updates.'
		return 0
	fi

	local nums=$(.prompt 'numbers' 'ssv or csv, 0 is all')
	if [ -z "$nums" ]; then
		.failure 'no input.'
	fi

	for num in $(echo $nums | sed 's/,/ /g'); do
		local file=$(printf "$files" | sed -n ${num}p)

		diff -u "$VSCODE_SNIPPET_DIR/$(basename $file)" "$file"|| true
	done

	local yn=$(.prompt 'update' 'y/N')
	if [ "$yn" != 'y' ]; then
		return 0
	fi

	for num in $(echo $nums | sed 's/,/ /g'); do
		local file=$(printf "$files" | sed -n ${num}p)
		if [ ! -f "$file" ]; then
			.failure "no such file '$file'." || true
			continue
		fi

		cp "$file" "$VSCODE_SNIPPET_DIR/$(basename $file)"
		.success "updated '$(basename $file)'"
	done
}

_snipgen
