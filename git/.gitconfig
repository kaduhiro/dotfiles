[user]
	# name  = kaduhiro # git config --global user.name "name"
	# email = github@kaduhiro.com # git config --global user.email "email"

[color]
	ui = auto

[core]
	editor      = vim
	filemode    = false
	autocrlf    = false
	safecrlf    = true
	quotepath   = false
	commentChar = ";"

[push]
	default = current

[pull]
	rebase = false

[alias]
	st = status
	stt = status -uno
	br = branch
	sw = switch
	rb = rebase
	rbc = rebase --continue
	co = checkout
	sco = sparse-checkout
	cp = cherry-pick
	ci = commit
	cia = commit --amend
	ciad = !"git commit --amend --date \"$(date)\""
	pushf = push --force-with-lease
	ss = stash
	sss = "!f(){ b=$(git rev-parse --abbrev-ref HEAD) && printf \"\\033[1;36m?\\033[m stash message \\033[2;37m($b)\\033[m \" && read m && git stash save -u \"${m:-$b}\"; };f"
	ssmv = "!f(){ [ -n \"$1\" ] && git stash store -m \"${2:-renamed}\" $(git stash drop ${1:-0} | sed 's/^.*(\\(.*\\))$/\\1/'); };f"
	diffc = diff --cached
	difff = diff --word-diff
	ll = log --stat --decorate=short --pretty=format:'%C(yellow)%h %Cgreen%cr %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
	lg = log --graph --date=short --decorate=short --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn%Cred%d %Creset%s'
	lm = log --merges --pretty=format:'%C(yellow)%h %Cgreen%ci %Cblue%cn%Cred%d %Creset%s %C(cyan)%b'
	msg = !"for m in \
'    feat: new feature for the user, not a new feature for build script' \
'     fix: bug fix for the user, not a fix to a build script' \
'    docs: changes to the documentation' \
'   style: formatting, missing semi colons, etc; no production code change' \
'refactor: refactoring production code, eg. renaming a variable' \
'    test: adding missing tests, refactoring tests; no production code change' \
'   chore: updating grunt tasks etc; no production code change' \
; do echo \"$m\"; done"
